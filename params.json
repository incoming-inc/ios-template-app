{"name":"Sourse PVN iOS SDK","tagline":"Sourse Push Notification SDK for iOS","body":"This document describe the steps needed to integrate the Sourse Push Video Notification SDK with your application. To access the SDK distribution zip and obtain access to your project's control panel, contact your Sourse representative. \r\n\r\nNote: For instructions on how to integrate the iOS Today Extension widget, please refer to the documentation in _the Sourse Push Video SDK widget add-on distribution zip_.   \r\n \r\n## Changelog\r\n\r\n* _Feb 27, 2015_: Added optional location and motion data collection permission calls to code examples\r\n* _Feb 27, 2015_: Added BOOL return value to `- (BOOL)application:(UIApplication *)application openURL:(NSURL *)url` so that host applications can handle their own app URLs. \r\n* _Feb 27, 2015_: Added optional SDK config file flags `notification_prefix`, `sound_file` and `in_app_rich_notifications`\r\n\r\n## Overview\r\n\r\nThe Sourse Push Video SDK can be used in a [new project](#creating-a-new-project) by cloning the simple template application, or can be [added to an existing application](#adding-the-push-video-notification-sdk-to-an-existing-project) by dropping the SDK distribution folder into your project, and adding a small amount of code.\r\n\r\n## Creating a new Project\r\n\r\nWe provide a template application to make the SDK integration easy in a new project. \r\n\r\n### Clone the Template Application\r\n\r\nClone the iOS template application at `https://github.com/sourse-ai/ios-template-app`. Choose between the swift and objective-C version. The Push Video template application `PVNTemplate.xcodeproj`, it can be opened width Xcode 6.\r\n\r\n### Import the iOS SDK zip\r\n\r\nThe PVN SDK distribution zip can be downloaded from your project in the Sourse control panel. \r\nThe distribution zip file contains a directory named incoming-ios-sdk, which itself contains:\r\n* the Sourse SDK static library\r\n* header files \r\n* a resource bundle required by the SDK\r\n\r\nDrag and drop the incoming-ios-sdk onto your XCode project. Tick \"Copy items if needed\". \r\n\r\n![Adding the SDK to your project](images/add_sdk_to_project_dialog.png)\r\n\r\n### Create or Edit the Sourse SDK Configuration File\r\n\r\nThe SDK relies on a configuration file named `incoming-ios-sdk.plist` which must be in you app main's target `Copy Bundle Resources` Build Phase. \r\n\r\nIf you downloaded the SDK distribution zip file from your project in the Sourse Push Video control panel, the archive may contains this file. In this case, go to the next step. To create the file, right click on the incoming­-ios-­sdk folder in the xcode explorer, and choose “New File” / “Resource” / “Property List”, name it `incoming-ios-sdk`.\r\n\r\n​This file must contains at minimum the following keys\r\n* `api_endpoint`: the Sourse API endpoint to connect to, e.g. `api-sandbox.incoming.tv`\r\n* `project_key`: your Sourse PVN project key\r\n\r\nYou will find both these values in the control panel, by going to the “App” page, in the top­left section titled “Download the push video SDK for iOS”.\r\n\r\nIn addition, this file may contain the following optional keys:\r\n* `notification_prefix`: (String) Prefix the notification text. E.g. \"New video!\" \r\n* `in_app_rich_notifications`: (BOOL) If set to true, the PVN SDK may display Rich Notifications when your app is in the foreground. \r\n* `notification_sound`: (string) - Filename of the sound to play when showing a notification, e.g. `sound1.caf`. The corresponding sound file need to be added to your main app target's bundle. For information about supported sound file formats, c.f. [here](https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/Chapters/IPhoneOSClientImp.html#//apple_ref/doc/uid/TP40008194-CH103-SW6)\r\n\r\n**Note**: if using the PVN SDK widget, you must also include a `app_url_scheme` entry, as described in the \"iOS SDK Installation Add-on: Today widget\" document. \r\n\r\n\r\n\r\n## Adding the Push Video Notification SDK to an existing Project\r\n\r\nAdding the PVN SDK to an existing project consist of the following steps. \r\n\r\n### Import the Push Video SDK distribution folder\r\n\r\nC.f. [above](#import-the-ios-sdk-zip) \r\n\r\n### Create or edit the incoming-ios-sdk.plist\r\n\r\nC.f. [above](#create-or-edit-the-incoming-sdk-configuration-file)\r\n\r\n### Add framework dependencies to your project Linked framework list (Objective-C only)\r\n\r\n(if your project is in Swift, you can skip this phase) Go into your app’s target’s Build Phases screen and add the following frameworks to the “Link Binary With Libraries” section.\r\n\r\n```\r\n* AVFoundation.framework\r\n* MediaPlayer.framework\r\n* SystemConfiguration.framework\r\n* CoreMotion.framework\r\n* CoreTelephony.framework\r\n* CoreData.framework\r\n* CoreMedia.framework\r\n* MediaPlayer.framework\r\n* MobileCoreServices.framework\r\n* SystemConfiguration.framework\r\n* Foundation.framework\r\n* CoreImage.framework\r\n* Accelerate.framework\r\n* UIKit.framework\r\n* libz.dylib\r\n* NotificationCenter.framework (status can be set to “Optional” if you want to support\r\niOS7\r\n```\r\n\r\n### Configure Background Modes\r\n\r\nUsing XCode, configure the application background modes:\r\n\r\n* click on your app target, then select `Capabilities`.\r\n* Turn on `Background Modes`,\r\n* In Background Modes, enable `Background fetch` and `Remote Notifications`\r\n\r\n![Setup background modes](images/setup_target_capabilities.png)\r\n\r\nIn your app `Info` pane, add the location data collection purpose, by adding a new key for `Privacy - Location Usage Description` to e.g. “To compute the best place and time to send you content updates”\r\n\r\n![Setup location privacy key](images/setup_info_plist_location_privacy_key.png)\r\n\r\n### Set linker flags\r\n\r\nEnable a linker flag that allows the use of categories in the Sourse SDK static library. Start by choosing the main target for your app, selecting the `Build Settings` tab, and then search for `other linker flags`. Under `Other Linker Flags`, add the `-ObjC`.\r\n\r\n![Setup linker flag](images/setup_linker_flag.png)\r\n\r\n### Add bridging header (swift only)\r\n\r\nSwift users must add this [bridging header](https://github.com/sourse-ai/ios-template-app/blob/master/Swift/ISDK-Bridging-Header.h) to their project to be able to use the Sourse PVN sdk.\r\n\r\n\r\n### Configure push remote notifications\r\n\r\n**Note:** The SDK functionality can be tested without performing this step. Enabling push notifications however enables a more efficient content dissemination, it is therefore necessary for production use. \r\n\r\nRemote notifications need to be enabled for your app ID, in the Apple Developer portal. In addition, Apple push notification SSL certificates mush be generated and uploaded into the Sourse control panel. To complete this step, please follow instructions at https://push-video-sandbox.incoming.tv/help#tab_4\r\n\r\n\r\n\r\n### Add a few lines of code to your application delegate. \r\n\r\nThe host application delegate must to forward several calls from the operating system to the SDK. These are all implemented in the template application and can be conveniently copied from there. Take a look into the sample application’s delegate code.\r\n\r\n* Objective-C <https://github.com/sourse-ai/ios-template-app/blob/master/Objective-C/PVNTemplate/PVTAppDelegate.m>\r\n* Swift <https://github.com/sourse-ai/ios-template-app/blob/master/Swift/PVNSampleSwift/AppDelegate.swift>\r\n\r\nThe minimum code to add to your application delegate is: \r\n\r\n#### Objective-C\r\n\r\n\r\n```\r\n#import \"ISDKAppDelegateHelper.h\"\r\n...\r\n\r\n\r\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions\r\n{\r\n    [ISDKAppDelegateHelper application:[UIApplication sharedApplication] didFinishLaunchingWithOptions:launchOptions];\r\n   \r\n    // This will pop-up the OS permission dialog, feel free to\r\n    // integrate them differently in your workflow\r\n    [ISDKAppDelegateHelper registerForNotifications];\r\n    \r\n    // the two following calls are optional. They enable location and motion data collection\r\n    // which improves the timing prediction of Push Video Notifications\r\n    // calling these methods may also result in the OS permission dialog being presented\r\n    // to the user.\r\n    [ISDKAppDelegateHelper registerForMotionActivity];\r\n    [ISDKAppDelegateHelper registerForLocationUpdates];\r\n    \r\n    return YES;\r\n}\r\n\r\n- (BOOL)application:(UIApplication *)application openURL:(NSURL *)url sourceApplication:(NSString *)sourceApplication annotation:(id)annotation\r\n{\r\n    if ([ISDKAppDelegateHelper handleOpenURL:url sourceApplication:sourceApplication annotation:annotation] == NO){\r\n       // perform handling of your app URL here\r\n    }\r\n    return YES;\r\n}\r\n\r\n- (void) application:(UIApplication *)application performFetchWithCompletionHandler:(void (^)(UIBackgroundFetchResult))completionHandler{\r\n    [ISDKAppDelegateHelper application:application performFetchWithCompletionHandler:completionHandler];\r\n}\r\n\r\n- (void)application:(UIApplication *)application handleEventsForBackgroundURLSession:(NSString *)identifier completionHandler:(void (^)())completionHandler\r\n{\r\n    [ISDKAppDelegateHelper application:application handleEventsForBackgroundURLSession:identifier completionHandler:completionHandler];\r\n}\r\n\r\n- (void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken\r\n{\r\n    [ISDKAppDelegateHelper application:application didRegisterForRemoteNotificationsWithDeviceToken:deviceToken];\r\n}\r\n\r\n- (void)application:(UIApplication *)application didFailToRegisterForRemoteNotificationsWithError:(NSError *)error\r\n{\r\n    [ISDKAppDelegateHelper application:application didFailToRegisterForRemoteNotificationsWithError:error];\r\n}\r\n\r\n- (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo\r\nfetchCompletionHandler:(void (^)(UIBackgroundFetchResult))completionHandler\r\n{\r\n    [ISDKAppDelegateHelper application:application didReceiveRemoteNotification:userInfo fetchCompletionHandler:completionHandler];\r\n}\r\n\r\n- (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo\r\n{\r\n    [ISDKAppDelegateHelper application:application didReceiveRemoteNotification:userInfo];\r\n}\r\n\r\n- (void)application:(UIApplication *)application didReceiveLocalNotification:(UILocalNotification *)notification\r\n{\r\n    [ISDKAppDelegateHelper application:application didReceiveLocalNotification:notification];\r\n}\r\n\r\n- (void)application:(UIApplication *)application handleActionWithIdentifier:(NSString *)identifier forLocalNotification:(UILocalNotification *)userInfo completionHandler:(void (^)())completionHandler {\r\n    [ISDKAppDelegateHelper application:application handleActionWithIdentifier:identifier forLocalNotification:userInfo completionHandler:completionHandler];\r\n}\r\n\r\n- (void)application:(UIApplication *)application didRegisterUserNotificationSettings:(UIUserNotificationSettings *)notificationSettings\r\n{\r\n    [ISDKAppDelegateHelper application:application didRegisterUserNotificationSettings:notificationSettings];\r\n}\r\n\r\n```\r\n\r\n\r\n#### Swift\r\n```\r\n\r\nimport UIKit\r\n\r\n@UIApplicationMain\r\nclass AppDelegate: UIResponder, UIApplicationDelegate \r\n{\r\n    var window: UIWindow?\r\n    func application(application: UIApplication, didFinishLaunchingWithOptions launchOptions: [NSObject: AnyObject]?) -> Bool     \r\n    { \r\n        // ISDK method forward\r\n        ISDKAppDelegateHelper.application(application, didFinishLaunchingWithOptions:launchOptions)\r\n        \r\n        // This will pop-up the OS permission dialog, feel free to\r\n        // integrate them differently in your workflow\r\n        ISDKAppDelegateHelper.registerForNotifications()\r\n        \r\n        // the two following calls are optional. They enable location and motion data collection\r\n        // which improves the timing prediction of Push Video Notifications.\r\n        // Calling these methods may result in the OS permission dialog being presented\r\n        // to the user.\r\n        ISDKAppDelegateHelper.registerForLocationUpdates()\r\n        ISDKAppDelegateHelper.registerForMotionActivity()\r\n        \r\n        \r\n        // <insert your app initialization code here>\r\n        return true\r\n    }\r\n    \r\n    \r\n    func application(application: UIApplication, openURL url: NSURL, sourceApplication: String?, annotation: AnyObject?) -> Bool \r\n    {\r\n        \r\n        // ISDK method forward\r\n        if (ISDKAppDelegateHelper.handleOpenURL(url, sourceApplication: sourceApplication, annotation: annotation) == NO)\r\n        { \r\n            // perform handling of your app URL here\r\n        } \r\n        return true\r\n    }\r\n    \r\n    \r\n    func application(application: UIApplication, performFetchWithCompletionHandler completionHandler: (UIBackgroundFetchResult) -> Void) {\r\n        \r\n        // ISDK method forward\r\n        ISDKAppDelegateHelper.application(application, performFetchWithCompletionHandler:completionHandler)\r\n        \r\n    }\r\n    \r\n    func application(application: UIApplication, handleEventsForBackgroundURLSession identifier: String, completionHandler: () -> Void) {\r\n        \r\n        // ISDK method forward\r\n        ISDKAppDelegateHelper.application(application, handleEventsForBackgroundURLSession: identifier, completionHandler: completionHandler)\r\n        \r\n    }\r\n    \r\n    func application(application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: NSData) {\r\n        \r\n        // ISDK method forward\r\n        ISDKAppDelegateHelper.application(application, didRegisterForRemoteNotificationsWithDeviceToken: deviceToken)\r\n        \r\n    }\r\n    \r\n    \r\n    func application(application: UIApplication, didFailToRegisterForRemoteNotificationsWithError error: NSError) {\r\n        \r\n        // ISDK method forward\r\n        ISDKAppDelegateHelper.application(application, didFailToRegisterForRemoteNotificationsWithError:error)\r\n    }\r\n    \r\n    func application(application: UIApplication, didReceiveRemoteNotification userInfo: [NSObject : AnyObject]) {\r\n        \r\n        // ISDK method forward\r\n        ISDKAppDelegateHelper.application(application, didReceiveRemoteNotification: userInfo)\r\n    }\r\n    \r\n    func application(application: UIApplication, didReceiveLocalNotification notification: UILocalNotification) {\r\n        \r\n        // ISDK method forward\r\n        ISDKAppDelegateHelper.application(application, didReceiveLocalNotification: notification)\r\n    }\r\n    \r\n    \r\n    func application(application: UIApplication, handleActionWithIdentifier identifier: String?, forLocalNotification notification: UILocalNotification, completionHandler: () -> Void) {\r\n        \r\n        // ISDK method forward\r\n        ISDKAppDelegateHelper.application(application, handleActionWithIdentifier: identifier, forLocalNotification: notification, completionHandler: completionHandler)\r\n    }\r\n    \r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}